<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Favicon Generator - Chai Vision</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            margin: 0;
            padding: 20px;
        }
        
        .container {
            background: white;
            border-radius: 20px;
            padding: 40px;
            max-width: 800px;
            width: 100%;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
        }
        
        h1 {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 30px;
            font-size: 32px;
        }
        
        .favicon-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .favicon-item {
            text-align: center;
        }
        
        .favicon-canvas {
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            margin-bottom: 10px;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .favicon-canvas:hover {
            transform: scale(1.05);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }
        
        .size-label {
            font-size: 12px;
            color: #6b7280;
            font-weight: 600;
        }
        
        .controls {
            display: flex;
            gap: 20px;
            flex-wrap: wrap;
            margin-bottom: 30px;
        }
        
        .control-group {
            flex: 1;
            min-width: 200px;
        }
        
        .control-group label {
            display: block;
            margin-bottom: 8px;
            font-size: 14px;
            font-weight: 600;
            color: #374151;
        }
        
        .control-group input,
        .control-group select {
            width: 100%;
            padding: 10px;
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            font-size: 14px;
        }
        
        .control-group input:focus,
        .control-group select:focus {
            outline: none;
            border-color: #667eea;
        }
        
        .buttons {
            display: flex;
            gap: 12px;
            flex-wrap: wrap;
        }
        
        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        
        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
        }
        
        .btn-secondary {
            background: #f3f4f6;
            color: #374151;
        }
        
        .btn-secondary:hover {
            background: #e5e7eb;
        }
        
        .instructions {
            background: #f9fafb;
            border-radius: 12px;
            padding: 20px;
            margin-top: 30px;
        }
        
        .instructions h3 {
            color: #1f2937;
            margin-bottom: 12px;
        }
        
        .instructions ol {
            color: #4b5563;
            line-height: 1.8;
            margin: 0;
            padding-left: 20px;
        }
        
        .instructions code {
            background: #e5e7eb;
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 13px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>ðŸŽ¨ Favicon Generator for Chai Vision</h1>
        
        <div class="controls">
            <div class="control-group">
                <label for="text">Icon Text (2 letters max):</label>
                <input type="text" id="text" value="CV" maxlength="2">
            </div>
            
            <div class="control-group">
                <label for="bgColor1">Background Gradient Start:</label>
                <input type="color" id="bgColor1" value="#667eea">
            </div>
            
            <div class="control-group">
                <label for="bgColor2">Background Gradient End:</label>
                <input type="color" id="bgColor2" value="#764ba2">
            </div>
            
            <div class="control-group">
                <label for="textColor">Text Color:</label>
                <input type="color" id="textColor" value="#ffffff">
            </div>
            
            <div class="control-group">
                <label for="style">Style:</label>
                <select id="style">
                    <option value="gradient">Gradient Background</option>
                    <option value="solid">Solid Background</option>
                    <option value="circle">Circle</option>
                    <option value="rounded">Rounded Square</option>
                </select>
            </div>
        </div>
        
        <div class="favicon-grid">
            <div class="favicon-item">
                <canvas id="favicon16" class="favicon-canvas" width="16" height="16"></canvas>
                <div class="size-label">16x16 (favicon.ico)</div>
            </div>
            
            <div class="favicon-item">
                <canvas id="favicon32" class="favicon-canvas" width="32" height="32"></canvas>
                <div class="size-label">32x32 (favicon.ico)</div>
            </div>
            
            <div class="favicon-item">
                <canvas id="favicon64" class="favicon-canvas" width="64" height="64"></canvas>
                <div class="size-label">64x64 (high-res)</div>
            </div>
            
            <div class="favicon-item">
                <canvas id="favicon180" class="favicon-canvas" width="180" height="180"></canvas>
                <div class="size-label">180x180 (apple-touch)</div>
            </div>
        </div>
        
        <div class="buttons">
            <button class="btn btn-primary" onclick="downloadAllFavicons()">ðŸ“¥ Download All Favicons</button>
            <button class="btn btn-secondary" onclick="generateSVGFavicon()">ðŸ“„ Generate SVG Version</button>
            <button class="btn btn-secondary" onclick="resetToDefault()">ðŸ”„ Reset to Default</button>
            <button class="btn btn-secondary" onclick="copyDataURL()">ðŸ“‹ Copy Data URL</button>
        </div>
        
        <div class="instructions">
            <h3>ðŸ“– How to Use Your Favicons</h3>
            <ol>
                <li>Click "Download All Favicons" to get all sizes</li>
                <li>Place <code>favicon.ico</code> in your <code>public/</code> folder</li>
                <li>Place <code>apple-touch-icon.png</code> in your <code>public/</code> folder</li>
                <li>Add these lines to your <code>index.html</code> <code>&lt;head&gt;</code>:
                    <pre style="background: white; padding: 12px; border-radius: 6px; overflow-x: auto;">
&lt;link rel="icon" type="image/x-icon" href="public/favicon.ico"&gt;
&lt;link rel="icon" type="image/png" sizes="32x32" href="public/favicon-32x32.png"&gt;
&lt;link rel="icon" type="image/png" sizes="16x16" href="public/favicon-16x16.png"&gt;
&lt;link rel="apple-touch-icon" sizes="180x180" href="public/apple-touch-icon.png"&gt;</pre>
                </li>
                <li>Alternative: Use "Copy Data URL" and paste directly in HTML:
                    <pre style="background: white; padding: 12px; border-radius: 6px; overflow-x: auto;">
&lt;link rel="icon" href="[PASTE_DATA_URL_HERE]"&gt;</pre>
                </li>
            </ol>
        </div>
    </div>
    
    <script>
        // Initialize
        let settings = {
            text: 'CV',
            bgColor1: '#667eea',
            bgColor2: '#764ba2',
            textColor: '#ffffff',
            style: 'gradient'
        };
        
        // Get elements
        const textInput = document.getElementById('text');
        const bgColor1Input = document.getElementById('bgColor1');
        const bgColor2Input = document.getElementById('bgColor2');
        const textColorInput = document.getElementById('textColor');
        const styleSelect = document.getElementById('style');
        
        // Add event listeners
        textInput.addEventListener('input', updateSettings);
        bgColor1Input.addEventListener('input', updateSettings);
        bgColor2Input.addEventListener('input', updateSettings);
        textColorInput.addEventListener('input', updateSettings);
        styleSelect.addEventListener('change', updateSettings);
        
        function updateSettings() {
            settings = {
                text: textInput.value || 'CV',
                bgColor1: bgColor1Input.value,
                bgColor2: bgColor2Input.value,
                textColor: textColorInput.value,
                style: styleSelect.value
            };
            drawAllFavicons();
        }
        
        function drawFavicon(canvasId, size) {
            const canvas = document.getElementById(canvasId);
            const ctx = canvas.getContext('2d');
            
            // Clear canvas
            ctx.clearRect(0, 0, size, size);
            
            // Draw background
            if (settings.style === 'circle') {
                // Circle background
                ctx.beginPath();
                ctx.arc(size/2, size/2, size/2, 0, 2 * Math.PI);
                
                if (settings.style === 'gradient' || settings.bgColor2 !== settings.bgColor1) {
                    const gradient = ctx.createLinearGradient(0, 0, size, size);
                    gradient.addColorStop(0, settings.bgColor1);
                    gradient.addColorStop(1, settings.bgColor2);
                    ctx.fillStyle = gradient;
                } else {
                    ctx.fillStyle = settings.bgColor1;
                }
                ctx.fill();
                
            } else if (settings.style === 'rounded') {
                // Rounded rectangle
                const radius = size * 0.15;
                ctx.beginPath();
                ctx.moveTo(radius, 0);
                ctx.lineTo(size - radius, 0);
                ctx.quadraticCurveTo(size, 0, size, radius);
                ctx.lineTo(size, size - radius);
                ctx.quadraticCurveTo(size, size, size - radius, size);
                ctx.lineTo(radius, size);
                ctx.quadraticCurveTo(0, size, 0, size - radius);
                ctx.lineTo(0, radius);
                ctx.quadraticCurveTo(0, 0, radius, 0);
                ctx.closePath();
                
                if (settings.style === 'gradient' || settings.bgColor2 !== settings.bgColor1) {
                    const gradient = ctx.createLinearGradient(0, 0, size, size);
                    gradient.addColorStop(0, settings.bgColor1);
                    gradient.addColorStop(1, settings.bgColor2);
                    ctx.fillStyle = gradient;
                } else {
                    ctx.fillStyle = settings.bgColor1;
                }
                ctx.fill();
                
            } else {
                // Square (default)
                if (settings.style === 'gradient') {
                    const gradient = ctx.createLinearGradient(0, 0, size, size);
                    gradient.addColorStop(0, settings.bgColor1);
                    gradient.addColorStop(1, settings.bgColor2);
                    ctx.fillStyle = gradient;
                } else {
                    ctx.fillStyle = settings.bgColor1;
                }
                ctx.fillRect(0, 0, size, size);
            }
            
            // Draw text
            ctx.fillStyle = settings.textColor;
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            
            // Adjust font size based on canvas size
            let fontSize = size * 0.4;
            if (settings.text.length === 1) {
                fontSize = size * 0.5;
            }
            
            ctx.font = `bold ${fontSize}px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif`;
            ctx.fillText(settings.text.toUpperCase(), size/2, size/2);
        }
        
        function drawAllFavicons() {
            drawFavicon('favicon16', 16);
            drawFavicon('favicon32', 32);
            drawFavicon('favicon64', 64);
            drawFavicon('favicon180', 180);
        }
        
        function downloadCanvas(canvas, filename) {
            canvas.toBlob(function(blob) {
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = filename;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                window.URL.revokeObjectURL(url);
            });
        }
        
        function downloadAllFavicons() {
            downloadCanvas(document.getElementById('favicon16'), 'favicon-16x16.png');
            downloadCanvas(document.getElementById('favicon32'), 'favicon-32x32.png');
            downloadCanvas(document.getElementById('favicon64'), 'favicon-64x64.png');
            downloadCanvas(document.getElementById('favicon180'), 'apple-touch-icon.png');
            
            // Create .ico file (simplified - real .ico would need proper format)
            alert('Downloaded all favicon files!\n\nNote: For a proper .ico file, use an online converter with the 16x16 and 32x32 PNGs.');
        }
        
        function generateSVGFavicon() {
            const svg = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
                <defs>
                    <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="100%">
                        <stop offset="0%" style="stop-color:${settings.bgColor1};stop-opacity:1" />
                        <stop offset="100%" style="stop-color:${settings.bgColor2};stop-opacity:1" />
                    </linearGradient>
                </defs>
                ${settings.style === 'circle' ? 
                    '<circle cx="50" cy="50" r="50" fill="url(#gradient)"/>' :
                    settings.style === 'rounded' ?
                    '<rect x="0" y="0" width="100" height="100" rx="15" fill="url(#gradient)"/>' :
                    '<rect x="0" y="0" width="100" height="100" fill="url(#gradient)"/>'
                }
                <text x="50" y="50" font-family="-apple-system, BlinkMacSystemFont, sans-serif" 
                      font-size="40" font-weight="bold" fill="${settings.textColor}" 
                      text-anchor="middle" dominant-baseline="middle">${settings.text.toUpperCase()}</text>
            </svg>`;
            
            const blob = new Blob([svg], {type: 'image/svg+xml'});
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'favicon.svg';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
        }
        
        function copyDataURL() {
            const canvas = document.getElementById('favicon32');
            const dataURL = canvas.toDataURL('image/png');
            
            navigator.clipboard.writeText(dataURL).then(() => {
                alert('Data URL copied to clipboard!\n\nPaste it directly in your HTML.');
            }).catch(() => {
                prompt('Copy this data URL:', dataURL);
            });
        }
        
        function resetToDefault() {
            textInput.value = 'CV';
            bgColor1Input.value = '#667eea';
            bgColor2Input.value = '#764ba2';
            textColorInput.value = '#ffffff';
            styleSelect.value = 'gradient';
            updateSettings();
        }
        
        // Initial draw
        drawAllFavicons();
        
        // Make canvases downloadable on click
        document.querySelectorAll('.favicon-canvas').forEach(canvas => {
            canvas.addEventListener('click', function() {
                const size = this.width;
                downloadCanvas(this, `favicon-${size}x${size}.png`);
            });
        });
    </script>
</body>
</html>
